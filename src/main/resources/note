## 개발 환경 ##
sts 3.9.4
tomcat 9
java 1.8.0_121

############## 테이블 구조 #################

CREATE TABLE `board_free` (
	`post_id` MEDIUMINT(1) NOT NULL COMMENT '게시글 아이디' AUTO_INCREMENT,
	`title` VARCHAR(100) NOT NULL COMMENT '게시글 제목',
    `content` TEXT DEFAULT '' COMMENT '게시글 내용',
	`select_count` SMALLINT(1) DEFAULT 0 COMMENT '조회수',
    `delete_status` CHAR(1) DEFAULT 'N' COMMENT '글 삭제 유무(Y/N)',
    `create_date` TIMESTAMP DEFAULT NOW() COMMENT '글 등록 시간',
	`modify_date` TIMESTAMP NULL DEFAULT NULL COMMENT'수정 시간',
	PRIMARY KEY (`post_id`)
) COMMENT '자유게시판';


CREATE TABLE `board_master` (
  `board_id` TINYINT(1) NOT NULL COMMENT '게시판 아이디' AUTO_INCREMENT,
  `board_name` VARCHAR(20) NOT NULL COMMENT '게시판 테이블명 table_** ',
  `board_desc` VARCHAR(100) DEFAULT '' COMMENT '게시판 설명',
  `create_date` TIMESTAMP DEFAULT NOW(),
  `modify_date` TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`board_id`),
  UNIQUE KEY (`board_name`)
) COMMENT '게시판 마스터 테이블';


CREATE TABLE `reply_free` (
	`reply_id` MEDIUMINT(1) NOT NULL COMMENT '댓글 아이디' AUTO_INCREMENT,
	`post_id` MEDIUMINT(1) NOT NULL COMMENT '게시글 아이디',
	`content` TEXT DEFAULT '' COMMENT '댓글 내용',
    `create_date` TIMESTAMP DEFAULT NOW() COMMENT '댓글 등록 시간',
	`modify_date` TIMESTAMP NULL DEFAULT NULL COMMENT'수정 시간',
	PRIMARY KEY (`reply_id`),
	FOREIGN KEY (`post_id`) REFERENCES `board_free`(`post_id`)
		ON DELETE CASCADE 
) COMMENT '자유게시판 댓글' ;



################# V1.0 목표 #####################
기한 : 무기한

내용 :
	게시판관리(생성,조회,수정,삭제,순서변경)
		- 게시판 속성
		  게시판 번호, 게시판 이름, 게시판 설명, 게시판 생성시간
		  
	게시판(글등록,글수정,글삭제,글조회[리스트페이징,상세])
		- 게시글 속성
		  게시글 번호, 글쓴이, 제목, 내용, 조회수, 작성시간, 수정시간, 댓글수
	
	댓글(등록,수정,삭제,리스트조회)
		- 댓글 속성
		  댓글번호, 글쓴이, 내용, 등록시간
		  
		  
################## 게시판 생성 API ##################
#1. boardName 금지단어 검증

#2.  board_master에 중복된 boardName이 있는지 체크
	SELECT
		count(*) AS totalCount
	FROM
		board_master
	WHERE
		board_name = #{boardName}

#3. board_master -> INSERT
	INSERT INTO board_master
		(
			board_name, board_desc
		)
	VALUES
		(
			#{boardName}, #{boardDesc}
		)

#4. 테이블 생성 -> board_${boardName}
	CREATE TABLE board_${boardName} (
	  `post_id` mediumint(1) NOT NULL AUTO_INCREMENT COMMENT '게시글 아이디',
	  `title` varchar(100) NOT NULL COMMENT '게시글 제목',
	  `content` text DEFAULT '' COMMENT '게시글 내용',
	  `select_count` smallint(1) DEFAULT 0 COMMENT '조회수',
	  `delete_status` char(1) DEFAULT 'N' COMMENT '글 삭제 유무(Y/N)',
	  `create_date` timestamp NOT NULL DEFAULT current_timestamp() COMMENT '글 등록 시간',
	  `modify_date` timestamp NULL DEFAULT NULL COMMENT '수정 시간',
	  PRIMARY KEY (`post_id`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=#{boardDesc}

#5. 테이블 생성 -> reply_${boardName}
	CREATE TABLE reply_${boardName} (
	  `reply_id` mediumint(1) NOT NULL AUTO_INCREMENT COMMENT '댓글 아이디',
	  `post_id` mediumint(1) NOT NULL COMMENT '게시글 아이디',
	  `content` text DEFAULT '' COMMENT '댓글 내용',
	  `create_date` timestamp NOT NULL DEFAULT current_timestamp() COMMENT '댓글 등록 시간',
	  `modify_date` timestamp NULL DEFAULT NULL COMMENT '수정 시간',
	  PRIMARY KEY (`reply_id`),
	  KEY `post_id` (`post_id`),
	  CONSTRAINT reply_${boardName}_fk FOREIGN KEY (`post_id`) REFERENCES board_${boardName} (`post_id`) ON DELETE CASCADE
	) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=#{boardDesc}

# 보드마스터 셀렉트 쿼리
	SELECT
		board_id AS boardId,
		board_name AS boardName,
        board_desc AS boardDesc
	FROM
		board_master
		
# 게시글 등록 쿼리 ( 다 읽어보시오 )
	* parameterType 은 반드시 VO로 해야함.
	* Service에서 리턴 타입을 boolean이 아닌 컨트롤러에서 받은 VO를 그대로 리턴해줘야함.
	
	 - API 흐름
	   1.브라우저에서 title, content 값을 api로 전달함
	   2.api Controller에서 값을 vo로 받음(vo에 title과 content 2개의 값이있는 상태)
	   3.서비스에서 아래 insert 쿼리를 실행함(파라미터는 vo로 해야함)
	   4.아래 쿼리의 selectKey 부분 때문에 쿼리 실행후 자동으로 vo안의 postId에 값이 담기게됨.( vo에 title,content,postId 3개의 값이 있는 상태)
	   5.서비스에서 insert후 리턴시 컨트롤러에서 받았던 vo를 그대로 리턴
	   6.컨트롤러가 브라우저에게 해당 값을 리턴
	   7.최종적으로 브라우저가 받은 값은 ( postId, title, content )이기 때문에 게시글등록API 호출후 따로 게시글상세조회API 호출할 필요가없음!--> 게시글등록 API 하나로 등록,상세조회 2가지 기능을 처리하는 효과 
	#################### 게시글 등록 쿼리 #########################
	
	INSERT INTO board_${boardName}
		(title, content)
	VALUES
		(#{title}, content)
		
	<selectKey resultType="int" keyProperty="postId" order="AFTER">
		SELECT LAST_INSERT_ID()
	</selectKey>
	
	#################### 게시글 등록 쿼리 #########################